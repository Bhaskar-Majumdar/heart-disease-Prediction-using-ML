# -*- coding: utf-8 -*-
"""DataMaining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jjNnL31zKN2WqyTekxvsFMPBIjaFsTFt
"""

! python -m pip install "git+https://github.com/javadba/mpld3@display_fix"

"""

**Project Description:** Given clinical parameters about a patient, can we predict whether or not they have heart disease?

**Dataset Description:**

####Importing Libraries####
"""

import numpy as np
import matplotlib.pyplot as plt
import mpld3
import pandas as pd
import pandas_profiling
import seaborn as sns

"""####Import The Dataset####

"""

from google.colab import files 
uploaded = files.upload()

"""####Show Dataset####

"""

df = pd.read_csv("heart_disease.csv")
df.head()

df.shape

"""####CLEANING OF THE DATASET####"""

series = pd.isnull(df['cigsPerDay'])
df[series]



"""#####As Education does not play a factor in Heart Attack, I have dropped that column####
and  I dropped currentSmoker column too as cigsPerDay column already denotes that the person is a Smoker, that's just extra information which is not useful.
"""

data = df.drop(['currentSmoker','education'], axis = 'columns')
data.head()

cigs = data['cigsPerDay']
cigs.head()

"""#####I have calculated the mean of people smoking a cigaratte per day####


"""

cig = cigs.mean()

"""####I rounded that value to the neartest integer####"""

import math
integer_value = math.floor(cig)
integer_value

"""####I filled the null values in 'cigsPerDay' with the mean of the Cigarattes smoked by a person in a day####"""

cigs.fillna(integer_value, inplace = True)

data.isnull().sum()

"""####I dropped the rest of the rows of the null values####"""

data.dropna( axis = 0, inplace = True)

"""####This shows that there are no Null value anymore in the DataFrame####"""

data.isnull().sum()

data.shape

"""####Created a separate DataFrame for the people having chances of heart attack###"""

Heart_Attack = data[data.TenYearCHD == 1]
Heart_Attack.head()



"""####Created another separate DataFrame for people having low chances of heart attack####"""

No_Heart_Attack = data[data.TenYearCHD == 0]
No_Heart_Attack.head()

"""####This groups the data on the basis of 'TenYearCHD' indicating the overall dependence of columns on 'TenYearCHD'####"""

data.groupby('TenYearCHD').mean()

"""#####As 'diaBP', 'BMI', 'heartRate' have values in the similar zone and almost equal to one another for 1 or 0 values for 'TenYearCHD', they are dropped####"""

final = data.drop(['diaBP','BMI','heartRate'], axis = 'columns')

No_Heart_Attack = final[final.TenYearCHD == 0]
No_Heart_Attack.head()

Heart_Attack = final[final.TenYearCHD == 1]
Heart_Attack.head()



final.groupby('TenYearCHD').mean()

"""####Split our dataset into its attributes and labels####"""

X = final.iloc[:, :-1].values
y = final.iloc[:, 10].values

"""####Train Test Split by using sklearn train_test_split####"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.20, random_state = 99)

"""####Feature Scaling####"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

"""####Training and Predictions####"""

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=5)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

"""#####Comparing Error Rate with the K Value####

"""

error = []

# Calculating error for K values between 1 and 50
for i in range(1, 50):
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train, y_train)
    pred_i = knn.predict(X_test)
    error.append(np.mean(pred_i != y_test))

"""#####Plot the error values against K values####"""

plt.figure(figsize=(12, 6))
plt.plot(range(1, 50), error, color='red', linestyle='dashed', marker='o',
         markerfacecolor='blue', markersize=10)
plt.title('Error Rate K Value')
plt.xlabel('K Value')
plt.ylabel('Mean Error')